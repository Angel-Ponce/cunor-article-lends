### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Article {
  description: String
  id: Int!
  institution: Institution!
  name: String!
  phisicalState: PhisicalState!
  serial: String
}

type ArticleLend {
  article: Article!
  count: Int!
  finalPhisicalState: PhisicalState
  initialPhisicalState: PhisicalState!
  lend: Lend!
}

type ArticlePage {
  length: Int!
  pages: Int!
  rows: [Article!]!
}

"""DateTime custom scalar type"""
scalar DateTime

input InputArticleLend {
  articleId: Int!
  count: Int!
  phisicalStateId: Int!
}

input InputArticleLendCompleted {
  articleId: Int!
  phisicalStateId: Int!
}

type Institution {
  countActiveLends: Int!
  countArticles: Int!
  countCompletedLends: Int!
  countPhisicalStates: Int!
  countProfessors: Int!
  countUsers: Int!
  id: Int!
  name: String!
}

type InstitutionPage {
  length: Int!
  pages: Int!
  rows: [Institution!]!
}

type Lend {
  articles: [ArticleLend!]!
  completed: Boolean!
  createdAt: DateTime!
  dueDate: DateTime!
  id: Int!
  institution: Institution!
  professor: Professor!
  realDueDate: DateTime
  user: User!
}

type LendPage {
  length: Int!
  pages: Int!
  rows: [Lend!]!
}

type Mutation {
  completeLend(articlesStates: [InputArticleLendCompleted!]!, id: Int!): Lend!
  createArticle(description: String, name: String!, phisicalStateId: Int!, serial: String): Article!
  createInstitution(name: String!): Institution!
  createLend(articles: [InputArticleLend!]!, dueDate: DateTime!, professorId: Int!): Lend!
  createPhisicalState(description: String, name: String!): PhisicalState!
  createProfessor(lastname: String!, name: String!, personalRegister: String!, phone: String): Professor!
  createUser(description: String, lastname: String!, name: String!, password: String!, phone: String, role: String!, username: String!): User!
  deleteArticle(id: Int!): Article!
  deleteInstitution(id: Int!): Institution!
  deleteLend(id: Int!): Lend!
  deletePhisicalState(id: Int!): PhisicalState!
  deleteProfessor(id: Int!): Professor!
  deleteUser(id: Int!): User!
  updateArticle(description: String, id: Int!, name: String, phisicalStateId: Int, serial: String): Article!
  updateInstitution(id: Int!, name: String): Institution!
  updatePassword(newPassword: String!, oldPassword: String!, userId: Int!): String!
  updatePhisicalState(description: String, id: Int!, name: String): PhisicalState!
  updateProfessor(id: Int!, lastname: String, name: String, personalRegister: String, phone: String): Professor!
  updateUser(description: String, id: Int!, lastname: String, name: String, phone: String, role: String, username: String): User!
}

type PhisicalState {
  description: String
  id: Int!
  institution: Institution!
  name: String!
}

type PhisicalStatePage {
  length: Int!
  pages: Int!
  rows: [PhisicalState!]!
}

type Professor {
  countActiveLends: Int!
  countCompletedLends: Int!
  id: Int!
  institution: Institution!
  lastname: String!
  lends: [Lend!]!
  name: String!
  personalRegister: String!
  phone: String
}

type ProfessorPage {
  length: Int!
  pages: Int!
  rows: [Professor!]!
}

type Query {
  article(id: Int!): Article!
  articles(limit: Int! = 10, page: Int! = 1): ArticlePage!
  institution(id: Int!): Institution!
  institutions(limit: Int! = 10, page: Int! = 1): InstitutionPage!
  lend(id: Int!): Lend!
  lends(limit: Int! = 10, page: Int! = 1): LendPage!
  login(password: String!, username: String!): String
  me: User
  phisicalState(id: Int!): PhisicalState!
  phisicalStates(limit: Int! = 10, page: Int! = 1): PhisicalStatePage!
  professor(id: Int!): Professor!
  professors(limit: Int! = 10, page: Int! = 1): ProfessorPage!
  user(id: Int!): User!
  users(limit: Int! = 10, page: Int! = 1): UserPage!
}

type User {
  countActiveLends: Int!
  countCompletedLends: Int!
  description: String
  id: Int!
  institution: Institution!
  lastname: String!
  lends: [Lend!]!
  name: String!
  phone: String
  role: String!
  username: String!
}

type UserPage {
  length: Int!
  pages: Int!
  rows: [User!]!
}