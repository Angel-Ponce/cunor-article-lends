generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Institution {
    id             Int             @id @default(autoincrement())
    name           String          @unique
    phisicalStates PhisicalState[]
    users          User[]
    articles       Article[]
    professors     Professor[]
    lends          Lend[]
    deletedAt      DateTime?       @default(dbgenerated("null"))
}

model PhisicalState {
    id            Int         @id @default(autoincrement())
    name          String
    description   String?
    institution   Institution @relation(fields: [institutionId], references: [id])
    institutionId Int
    articles      Article[]
    deletedAt     DateTime?   @default(dbgenerated("null"))
}

model User {
    id            Int         @id @default(autoincrement())
    name          String
    lastname      String
    phone         String?
    description   String?
    username      String      @unique
    password      String
    role          String
    institution   Institution @relation(fields: [institutionId], references: [id])
    institutionId Int
    lends         Lend[]
    deletedAt     DateTime?   @default(dbgenerated("null"))
}

model Article {
    id              Int           @id @default(autoincrement())
    name            String
    description     String?
    phisicalState   PhisicalState @relation(fields: [phisicalStateId], references: [id])
    phisicalStateId Int
    serial          String?
    institution     Institution   @relation(fields: [institutionId], references: [id])
    institutionId   Int
    lends           ArticleLend[]
    deletedAt       DateTime?     @default(dbgenerated("null"))
}

model Professor {
    id               Int         @id @default(autoincrement())
    name             String
    lastname         String
    phone            String?
    personalRegister String      @unique
    institution      Institution @relation(fields: [institutionId], references: [id])
    institutionId    Int
    lends            Lend[]
    deletedAt        DateTime?   @default(dbgenerated("null"))
}

model Lend {
    id            Int           @id @default(autoincrement())
    user          User          @relation(fields: [userId], references: [id])
    userId        Int
    professor     Professor     @relation(fields: [professorId], references: [id])
    professorId   Int
    createdAt     DateTime      @default(now())
    completed     Boolean       @default(false)
    dueDate       DateTime
    realDueDate   DateTime?     @default(dbgenerated("null"))
    institution   Institution   @relation(fields: [institutionId], references: [id])
    institutionId Int
    articles      ArticleLend[]
    deletedAt     DateTime?     @default(dbgenerated("null"))
}

model ArticleLend {
    lend                   Lend    @relation(fields: [lendId], references: [id])
    lendId                 Int
    initialPhisicalStateId Int
    finalPhisicalStateId   Int?    @default(dbgenerated("null"))
    article                Article @relation(fields: [articleId], references: [id])
    articleId              Int
    count                  Int

    @@id([lendId, articleId])
}
